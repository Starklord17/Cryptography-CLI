import * as crypto from "crypto";

type PRNG = "bytes" | "int" | "uuid";

/**
 * The function `prng` generates random bytes, integers, or UUIDs based on the specified type and
 * parameters.
 * @param {PRNG} type - The `type` parameter in the `prng` function specifies the type of pseudo-random
 * number generation to use. It can be one of the following options: "bytes" for generating random
 * bytes, "int" for generating random integers within a range, or "uuid" for generating a random UUID
 * @param {number} size - The `size` parameter specifies the number of bytes to generate when the PRNG
 * type is set to "bytes".
 * @param {number} min - The `min` parameter represents the minimum value that can be generated by the
 * pseudo-random number generator (PRNG) when the `type` is set to "int".
 * @param {number} max - The `max` parameter in the `prng` function represents the maximum value that
 * can be generated by the pseudo-random number generator (PRNG) based on the specified type. It is
 * used when the `type` is set to "int" to define the upper limit of the random integer that
 * @param {BufferEncoding} encoding - The `encoding` parameter specifies the encoding of the output
 * when generating random bytes using `crypto.randomBytes()`. Common encodings include 'hex', 'base64',
 * and 'utf8'.
 * @returns The `prng` function returns different values based on the `type` parameter provided:
 * - If `type` is "bytes", it returns a random string of bytes of the specified `size` encoded in the
 * specified `encoding`.
 * - If `type` is "int", it returns a random integer between the specified `min` and `max` values.
 * - If `type` is "
 */
const prng = (
  type: PRNG,
  size: number,
  min: number,
  max: number,
  encoding: BufferEncoding
) => {
  switch (type) {
    case "bytes":
      return crypto.randomBytes(size).toString(encoding);
    case "int":
      return crypto.randomInt(min, max);
    case "uuid":
      return crypto.randomUUID();
  }
};

export default prng;

// Example
// yarn run cli prng -- --type int --min 0 --max 10
